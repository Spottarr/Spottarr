name: Docker build
on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  #pull_request:
  #  branches: [ "main" ]
env:
  IMAGES: |
    spottarr/spottarr
    ghcr.io/spottarr/spottarr
permissions:
  contents: read
  packages: write
jobs:
  build:
    name: Docker build
    strategy:
      matrix:
        platform:
          - name: linux/amd64
            digest: linux-amd64
            runner: ubuntu-latest
          - name: linux/arm64
            digest: linux-arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add docker metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGES }}

      - name: Build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          platforms: ${{ matrix.platform.name }}
          file: src/Spottarr.Web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          # Push by digest so we can merge the builds for different platforms later
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            BUILD_CONFIGURATION=Release
            ${{ startsWith(github.ref_name, 'v') && format('BUILD_VERSION={0}', github.ref_name) || '' }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v5
        with:
          name: digests-${{ matrix.platform.digest }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    name: Docker merge manifest
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download digests
        uses: actions/download-artifact@v6
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Add docker metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGES }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(while IFS= read -r image; do
            [ -z "$image" ] && continue
            for file in *; do
              printf "%s@sha256:%s " "$image" "$file"
            done
          done <<< "${{ env.IMAGES }}")

      - name: Inspect image
        run: |
          while IFS= read -r image; do
            [ -z "$image" ] && continue
            docker buildx imagetools inspect "$image:${{ steps.meta.outputs.version }}"
          done <<< "${{ env.IMAGES }}"
          