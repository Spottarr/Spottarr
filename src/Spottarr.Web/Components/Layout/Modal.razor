@using Spottarr.Web.Components.Shared
@inject IJSRuntime JsRuntime

<dialog @ref="_element" class="p-6 w-full max-w-2xl max-h-full mx-auto z-50 mt-4 bg-transparent backdrop:bg-black/50 backdrop:backdrop-blur-md">
    <div class="relative bg-white rounded-lg shadow dark:bg-slate-700">
        <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-slate-600">
            <h3 class="text-xl font-semibold text-slate-900 dark:text-white">Search</h3>
            <button @onclick="Close"
                    type="button"
                    class="text-slate-400 bg-transparent hover:bg-slate-200 hover:text-slate-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-slate-600 dark:hover:text-white"
                    data-modal-hide="default-modal">
                <Icon Name="close" CssClass="w-3 h-3"/>
            </button>
        </div>
        <div class="text-slate-900 dark:text-white">
            @ChildContent
        </div>
    </div>
    
</dialog>

@code {
    private DotNetObjectReference<Modal>? _this;
    private ElementReference _element;
    
    [Parameter]
    public required RenderFragment ChildContent { get; init; }

    [Parameter]
    public bool IsOpen { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _this = DotNetObjectReference.Create(this);
            await Initialize();
        }

        await (IsOpen ? Open() : Close());
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private ValueTask Initialize() => JsRuntime.InvokeVoidAsync("blazorInitializeModal", _element, _this);

    private async Task Open()
    {
        IsOpen = true;
        await JsRuntime.InvokeVoidAsync("blazorOpenModal", _element);
    }
    
    private async Task Close()
    {
        IsOpen = false;
        await JsRuntime.InvokeVoidAsync("blazorCloseModal", _element);
    }

    [JSInvokable]
    public async Task OnJsClose(string returnValue) => await Close();

}