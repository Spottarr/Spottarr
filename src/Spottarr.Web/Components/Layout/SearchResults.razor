@using System.Reactive.Linq
@using System.Reactive.Subjects
@using Spottarr.Data.Entities
@using Spottarr.Services.Contracts
@using Spottarr.Services.Models
@implements IDisposable

<div class="p-4 md:p-5 space-y-4">
    <input @oninput="OnSearch"
           class="w-full p-2 items-center rounded-md text-sm focus:outline-none focus:ring focus:ring-slate-500 bg-gray-100 dark:bg-slate-600"
           type="text"
           name="q"
           placeholder="Search..."
           autofocus/>
</div>
@if (_searchResults.Length != 0)
{
    <div class="p-4 md:p-5 space-y-4 border-t dark:border-slate-600">
        @foreach (var spot in _searchResults)
        {
            <p>@spot.Title</p>
        }
    </div>
}

@code {

    [Inject] private ISpotSearchService SpotSearchService { get; set; } = default!;

    private Spot[] _searchResults = [];
    private readonly Subject<string?> _searchQuery = new();
    private IDisposable? _searchSubscription;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _searchSubscription = _searchQuery
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .SelectMany(async q => await GetSpots(q))
            .Subscribe(result =>
            {
                _searchResults = result;
                InvokeAsync(StateHasChanged);
            });
    }

    private async Task<Spot[]> GetSpots(string? query)
    {
        var result = await SpotSearchService.Search(new SpotSearchFilter()
        {
            Categories = null,
            Years = null,
            Seasons = null,
            Episodes = null,
            Query = query,
            Limit = 20,
            Offset = 0,
        });
        return result.Spots.ToArray();
    }
    

    public void Dispose() => _searchSubscription?.Dispose();

    private void OnSearch(ChangeEventArgs args)
    {
        if (args.Value == null || args.Value is not string query) return;
        _searchQuery.OnNext(query.Trim());
    }
}