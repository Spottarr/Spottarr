// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spottarr.Data;

#nullable disable

namespace Spottarr.Data.Migrations
{
    [DbContext(typeof(SpottarrDbContext))]
    [Migration("20250510094213_AddFtdFieldsAndExternalIdsToSpot")]
    partial class AddFtdFieldsAndExternalIdsToSpot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Spottarr.Data.Entities.FtsSpot", b =>
                {
                    b.Property<int>("RowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Match")
                        .HasColumnType("TEXT")
                        .HasColumnName("FtsSpots");

                    b.Property<double?>("Rank")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RowId");

                    b.ToTable("FtsSpots", (string)null);
                });

            modelBuilder.Entity("Spottarr.Data.Entities.Spot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("ApplicationGenres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ApplicationPlatforms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ApplicationTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AudioBitrates")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AudioFormats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AudioGenres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AudioSources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AudioTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Bytes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Episodes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("GameFormats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("GameGenres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("GamePlatforms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("GameTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImageFormats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImageGenres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImageLanguages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageMessageId")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImageSources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImageTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("IndexedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<long>("MessageNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Newsgroup")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("NewznabCategories")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NzbMessageId")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseTitle")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Seasons")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SpottedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Spotter")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TvdbId")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Years")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("MessageNumber");

                    b.HasIndex("TvdbId");

                    b.ToTable("Spots", (string)null);
                });

            modelBuilder.Entity("Spottarr.Data.Entities.FtsSpot", b =>
                {
                    b.HasOne("Spottarr.Data.Entities.Spot", "Spot")
                        .WithOne("FtsSpot")
                        .HasForeignKey("Spottarr.Data.Entities.FtsSpot", "RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("Spottarr.Data.Entities.Spot", b =>
                {
                    b.Navigation("FtsSpot");
                });
#pragma warning restore 612, 618
        }
    }
}
